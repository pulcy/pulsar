#!/bin/bash
# Subliminl development tools root script

export SUBLIMINL_ME=`readlink -f $0`
export SUBLIMINL_DIR=`dirname $SUBLIMINL_ME`
export SUBLIMINL_ROOT=${SUBLIMINL_ROOT:=~/.subliminl}

[[ -f $SUBLIMINL_ROOT/.env ]] && source $SUBLIMINL_ROOT/.env

registryhost=arvika.subliminl.com
tunnelsocket=~/.ssh-tunnel-subliminl-registry

ETCD_IMAGE=subliminl/etcd:0.4.6
AMBASSADORD_IMAGE=progrium/ambassadord 
LB_IMAGE=load-balancer
REGISTRATOR_IMAGE=subliminl/registrator

# Open SSH tunnel
function openTunnel {
	if [ ! -e $tunnelsocket ]; then
	    ssh -L5000:localhost:5000 -L16012:localhost:16012 -L16073:localhost:16073 -f -N -M -S $tunnelsocket admin@$registryhost
	fi
}

# Close SSH tunnel
function closeTunnel {
	if [ -e $tunnelsocket ]; then
		ssh -S $tunnelsocket -O exit admin@$registryhost
	fi
}

function setupDockerVariables {
    NAME=$(hostname)
    IP=$(dig +short $NAME)	
}

function stopContainer {
	docker stop --time=3 $1 &> /dev/null
	docker kill $1 &> /dev/null
	docker rm $1 &> /dev/null
}

function createCertificate {
	TLS_DIR=$SUBLIMINL_ROOT/tls
	mkdir -p $TLS_DIR
	DOMAIN=local.subliminl.com

	if [ ! -f $TLS_DIR/server.crt ]; then

		# Generate a passphrase
		export PASSPHRASE=$(head -c 500 /dev/urandom | tr -dc a-z0-9A-Z | head -c 128; echo)
		 
		# Certificate details; replace items in angle brackets with your own info
		subj="/C=NL/O=Subliminl Development/localityName=Arvika/commonName=local.subliminl.com/organizationalUnitName=Development/emailAddress=test@subliminl.com"
		 
		# Generate the server private key
		openssl genrsa -des3 -out $TLS_DIR/server.key -passout env:PASSPHRASE 2048
		 
		# Generate the CSR
		openssl req \
		    -new \
		    -batch \
		    -subj "$subj" \
		    -key $TLS_DIR/server.key \
		    -out $TLS_DIR/server.csr \
		    -passin env:PASSPHRASE
		cp $TLS_DIR/server.key $TLS_DIR/server.key.org
		 
		# Strip the password so we don't have to type it every time we restart Apache
		openssl rsa -in $TLS_DIR/server.key.org -out $TLS_DIR/server.key -passin env:PASSPHRASE
		 
		# Generate the cert (good for 10 years)
		openssl x509 -req -days 3650 -in $TLS_DIR/server.csr -signkey $TLS_DIR/server.key -out $TLS_DIR/server.crt

	fi
}

case "$1" in
	images)
	docker images
	;;

	install)
	mkdir -p $HOME/bin
    ln -sf $SUBLIMINL_ME $HOME/bin/subliminl
    npm set registry http://arvika-ssh:16012
    echo "Run 'npm adduser --registry http://arvika-ssh:16073' if you need to publish NPM packages"
    ;;

	push)
	openTunnel
	docker tag $2 arvika-ssh:5000/$2
	docker push arvika-ssh:5000/$2
	docker rmi arvika-ssh:5000/$2
	;;

	pull)
	openTunnel
	docker pull arvika-ssh:5000/$2
	docker tag arvika-ssh:5000/$2 $2
	docker rmi arvika-ssh:5000/$2
	;;

	tunnel)
	openTunnel
	;;

	close-tunnel)
	closeTunnel
	;;

	test-etcd)
	stopContainer etcd
    DATA_DIR=$SUBLIMINL_ROOT/etcd
    mkdir -p $DATA_DIR
    setupDockerVariables
    DISCOVERY_FILE=$SUBLIMINL_ROOT/.etcd_discovery
    if [ ! -f $DISCOVERY_FILE ]; then
    	curl -L https://discovery.etcd.io/new > $DISCOVERY_FILE
    fi
    DISCOVERY=$(cat $DISCOVERY_FILE)
    docker run -d -p 4001:4001 -p 7001:7001 -v $DATA_DIR:$DATA_DIR --name etcd \
        $ETCD_IMAGE \
        -name $NAME -addr $IP:4001 -peer-addr $IP:7001 -data-dir $DATA_DIR \
        -discovery $DISCOVERY
	;;

	test-mongo)
    setupDockerVariables
	stopContainer mongo
	docker run --name mongo -d -e PORT=27017 --expose 27017 -p 27017 $AMBASSADORD_IMAGE $IP:27017
	;;

	test-lb)
    setupDockerVariables
    createCertificate
	stopContainer lb
	DATA_DIR=$SUBLIMINL_ROOT/lb
	mkdir -p $DATA_DIR
	mkdir -p $DATA_DIR/tls
	[[ -e $DATA_DIR/tls/server.key ]] || cp $SUBLIMINL_ROOT/tls/server.key $DATA_DIR/tls/
	[[ -e $DATA_DIR/tls/server.crt ]] || cp $SUBLIMINL_ROOT/tls/server.crt $DATA_DIR/tls/
	docker run --name lb -d -p 80:80 -p 443:443 --link etcd:etcd -v $DATA_DIR:/data $LB_IMAGE
	;;

	test-registrator)
    setupDockerVariables
	stopContainer registrator
    REGION="test"
    docker run --name registrator -d --link etcd:etcd -v /var/run/docker.sock:/var/run/docker.sock $REGISTRATOR_IMAGE -ip=$IP etcd://etcd:4001/services/$REGION/
    ;;

	test-up)
	$0 test-etcd
	$0 test-mongo
	$0 test-registrator
	$0 test-lb
	;;

	help)
	cat <<EOF
    help                               Print a list of commands
    install                            Install a link to this script in ~/bin
    push LOCAL-IMAGE-NAME              Push a docker image to the registry
    pull LOCAL-IMAGE-NAME              Pull a docker images from the registry
    close-tunnel                       Close any existing SSH tunnel to arvika.subliminl.com
    tunnel                             Open aan SSH tunnel to arvika.subliminl.com (named arvika-ssh)
    test-etcd                          Create a local test etcd container
    test-lb                            Create a local test load-balancer container
    test-mongo                         Create a local test mongo-ambassador container
    test-registrator                   Create a local test registrator container
    test-up                            Create a local test cluster of all basic containers (etcd, mongo, registrator, load-balancer)
EOF
	;;

	*)
	$0 help
	;;
esac

